pipeline {
    agent any

    environment {
        IMAGE_NAME = "airline-management-system"
        CONTAINER_NAME = "airline-management-container"
        AWS_EC2_IP = "13.220.161.100"
        SSH_CREDENTIALS_ID = "ec2-ssh-key"
        PROJECT_DIR = "airline-management-system" // inner directory with pom.xml and Dockerfile
    }
    tools {
        git 'Default' 
      }
    stages {
        stage('Clean Workspace') {
            steps {
                // Delete all files in the workspace to avoid stale files/errors
                deleteDir()
            }
        }

        stage('Checkout') {
            steps {
                git url: 'https://github.com/Moulik116/airline-management-system', branch: 'main'
            }
        }

        stage('Build Maven Project') {
            agent {
                docker {
                    image 'maven:3.9.1-openjdk-21'
                    args '-v $HOME/.m2:/root/.m2' // cache Maven dependencies
                }
            }
            steps {
                dir("${PROJECT_DIR}") {
                    sh 'mvn clean install'
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                dir("${PROJECT_DIR}") {
                    sh "docker build -t $IMAGE_NAME ."
                }
            }
        }

        stage('Push Docker Image (optional)') {
            when {
                expression { return false } // change to true to enable image push
            }
            steps {
                echo 'Skipping image push (not enabled)'
            }
        }

        stage('Deploy to EC2') {
            steps {
                sshagent (credentials: [env.SSH_CREDENTIALS_ID]) {
                    sh """
                    ssh -o StrictHostKeyChecking=no ec2-user@$AWS_EC2_IP '
                        set -e
                        docker stop $CONTAINER_NAME || true
                        docker rm $CONTAINER_NAME || true
                        docker rmi $IMAGE_NAME || true
                        mkdir -p ~/app/$PROJECT_DIR
                        cd ~/app/$PROJECT_DIR
                        git pull || true
                        docker build -t $IMAGE_NAME .
                        docker run -d -p 8082:8082 --name $CONTAINER_NAME $IMAGE_NAME
                    '
                    """
                }
            }
        }
    }

    post {
        success {
            echo "Deployed successfully"
        }
        failure {
            echo "Build/Deploy failed"
        }
    }
}
