pipeline {
    agent any

    environment {
        IMAGE_NAME = "airline-management-system"
        CONTAINER_NAME = "airline-management-container"
        AWS_EC2_IP = "54.204.155.165"
        SSH_CREDENTIALS_ID = "ec2-ssh-key"
        DOCKERHUB_USERNAME = "moulik116"
        PROJECT_DIR = "airline-management-system"
    }

    tools {
        git 'Default'
    }

    stages {
        stage('Clean Workspace') {
            steps {
                cleanWs()
            }
        }

        stage('Checkout') {
            steps {
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: '*/main']],
                    userRemoteConfigs: [[url: 'https://github.com/Moulik116/airline-management-system.git']],
                    extensions: [[$class: 'CloneOption', retries: 3]],
                    gitTool: 'Default'
                ])
                sh 'pwd'
                sh 'ls -la'
                sh 'ls -la ${PROJECT_DIR}/'
                sh 'git status || echo "Git status failed"'
            }
        }

        stage('Build Maven Project') {
            agent {
                docker {
                    image 'maven:3.9.6-eclipse-temurin-21'
                    args '-v $WORKSPACE:/app -v $HOME/.m2:/root/.m2'
                    reuseNode true
                }
            }
            steps {
                dir("${PROJECT_DIR}") {
                    sh 'pwd'
                    sh 'ls -la'
                    sh 'mvn --version'
                    // Build without tests
                    sh 'mvn clean compile'
                }
            }
        }

        stage('Run Tests') {
            agent {
                docker {
                    image 'maven:3.9.6-eclipse-temurin-21'
                    args '-v $WORKSPACE:/app -v $HOME/.m2:/root/.m2'
                    reuseNode true
                }
            }
            steps {
                dir("${PROJECT_DIR}") {
                    sh 'pwd'
                    sh 'mvn test'
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                dir("${PROJECT_DIR}") {
                    sh 'pwd'
                    sh 'ls -la'
                    sh 'ls -la target/'
                    sh "docker build -t ${IMAGE_NAME} ."
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    docker.withRegistry('https://index.docker.io/v1/', 'docker-hub-credentials') {
                        sh "docker tag ${IMAGE_NAME} ${DOCKERHUB_USERNAME}/${IMAGE_NAME}:latest"
                        sh "docker push ${DOCKERHUB_USERNAME}/${IMAGE_NAME}:latest"
                    }
                }
            }
        }

        stage('Deploy to EC2') {
            steps {
                withCredentials([sshUserPrivateKey(credentialsId: env.SSH_CREDENTIALS_ID, keyFileVariable: 'SSH_KEY')]) {
                    sh """
                    chmod 600 \$SSH_KEY

                    ssh -i \$SSH_KEY -o StrictHostKeyChecking=no ec2-user@${AWS_EC2_IP} 'echo "SSH connection successful"'

                    ssh -i \$SSH_KEY -o StrictHostKeyChecking=no ec2-user@${AWS_EC2_IP} '
                        set -e
                        if ! command -v docker &> /dev/null; then
                            echo "Docker not found on EC2, installing..."
                            sudo yum install -y docker
                            sudo systemctl start docker
                            sudo systemctl enable docker
                            sudo usermod -aG docker ec2-user
                        fi
                        docker stop ${CONTAINER_NAME} || true
                        docker rm ${CONTAINER_NAME} || true
                        docker rmi ${IMAGE_NAME} || true
                        docker pull ${DOCKERHUB_USERNAME}/${IMAGE_NAME}:latest
                        docker run -d -p 8082:8082 --name ${CONTAINER_NAME} ${DOCKERHUB_USERNAME}/${IMAGE_NAME}:latest
                    '
                    """
                }
            }
        }
    }

    post {
        success {
            echo "Build and deployment succeeded"
        }
        failure {
            echo "Build and/or deployment failed"
        }
    }
}
