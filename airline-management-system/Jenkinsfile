pipeline {
    agent any

    environment {
        IMAGE_NAME = "airline-management-system"
        CONTAINER_NAME = "airline-management-container"
        AWS_EC2_IP = "54.204.155.165"
        SSH_CREDENTIALS_ID = "ec2-ssh-key"
        DOCKERHUB_USERNAME = "moulik116"
        PROJECT_DIR = "airline-management-system" // Subfolder containing Spring Boot code
    }

    tools {
        git 'Default' // Ensure 'Default' Git tool is configured in Jenkins
    }

    stages {
        stage('Clean Workspace') {
            steps {
                // Delete all files in the workspace to avoid stale files/errors
                cleanWs()
            }
        }

        stage('Checkout') {
            steps {
                // Explicit checkout with retries and debug output
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: '*/main']],
                    userRemoteConfigs: [[url: 'https://github.com/Moulik116/airline-management-system.git']],
                    extensions: [[$class: 'CloneOption', retries: 3]],
                    gitTool: 'Default'
                ])
                // Debug the workspace state
                sh 'pwd'
                sh 'ls -la'
                sh 'ls -la ${PROJECT_DIR}/'
                sh 'git status || echo "Git status failed"'
            }
        }

        stage('Build Maven Project') {
            agent {
                docker {
                    image 'maven:3.9.6-eclipse-temurin-21'
                    args '-v $WORKSPACE:/app -v $HOME/.m2:/root/.m2' // Mount workspace and Maven repo
                    reuseNode true // Ensure the same node is used to persist workspace
                }
            }
            steps {
                dir("${PROJECT_DIR}") {
                    // Debug: Verify pom.xml exists and workspace mapping
                    sh 'pwd'
                    sh 'ls -la'
                    sh 'mvn --version' // Verify Maven version
                    // Run Maven build with error handling
                    script {
                        def mavenStatus = sh(script: 'mvn clean install -DskipTests', returnStatus: true)
                        if (mavenStatus != 0) {
                            error "Maven build failed with exit code ${mavenStatus}"
                        }
                    }
                    // Validate that target/ directory and JAR file exist
                    sh 'ls -la target/'
                    sh 'ls -la target/*.jar || echo "No JAR file found in target/"'
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                dir("${PROJECT_DIR}") {
                    // Debug: Verify Dockerfile and JAR file exist
                    sh 'pwd'
                    sh 'ls -la'
                    sh 'ls -la target/'
                    sh "docker build -t ${IMAGE_NAME} ."
                }
            }
        }

        stage('Push Docker Image') {
            when {
                expression { return true } // Enable image push
            }
            steps {
                script {
                    // Push to Docker Hub
                    docker.withRegistry('https://index.docker.io/v1/', 'docker-hub-credentials') {
                        sh "docker tag ${IMAGE_NAME} ${DOCKERHUB_USERNAME}/${IMAGE_NAME}:latest"
                        sh "docker push ${DOCKERHUB_USERNAME}/${IMAGE_NAME}:latest"
                    }
                }
            }
        }

        stage('Deploy to EC2') {
            steps {
                withCredentials([sshUserPrivateKey(credentialsId: env.SSH_CREDENTIALS_ID, keyFileVariable: 'SSH_KEY')]) {
                    sh """
                    # Ensure the SSH key has the correct permissions
                    chmod 600 \$SSH_KEY

                    # Test SSH connectivity
                    ssh -i \$SSH_KEY -o StrictHostKeyChecking=no ec2-user@${AWS_EC2_IP} 'echo "SSH connection successful"'

                    # Deploy to EC2
                    ssh -i \$SSH_KEY -o StrictHostKeyChecking=no ec2-user@${AWS_EC2_IP} '
                        set -e
                        # Ensure Docker is installed and running
                        if ! command -v docker &> /dev/null; then
                            echo "Docker not found on EC2, installing..."
                            sudo yum install -y docker
                            sudo systemctl start docker
                            sudo systemctl enable docker
                            sudo usermod -aG docker ec2-user
                        fi
                        # Stop and remove existing container/image
                        docker stop ${CONTAINER_NAME} || true
                        docker rm ${CONTAINER_NAME} || true
                        docker rmi ${IMAGE_NAME} || true
                        # Pull the pre-built image from Docker Hub
                        docker pull ${DOCKERHUB_USERNAME}/${IMAGE_NAME}:latest
                        # Run the Docker container
                        docker run -d -p 8082:8082 --name ${CONTAINER_NAME} ${DOCKERHUB_USERNAME}/${IMAGE_NAME}:latest
                    '
                    """
                }
            }
        }
    }

    post {
        success {
            echo "Deployed successfully"
        }
        failure {
            echo "Build/Deploy failed"
        }
    }
}